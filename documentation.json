{
    "pipes": [],
    "interfaces": [],
    "injectables": [
        {
            "name": "SequenceGeneratorService",
            "id": "injectable-SequenceGeneratorService-2ff0ee9addac58a0b965b43d4f6cdb87",
            "file": "projects/basic-component-library/src/lib/utils/sequence-generator.service.ts",
            "properties": [
                {
                    "name": "_sequence",
                    "defaultValue": "1",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SequenceGeneratorService {\n  private _sequence = 1;\n\n  get sequence(): number {\n    return this._sequence++;\n  }\n}\n",
            "accessors": {
                "sequence": {
                    "name": "sequence",
                    "getSignature": {
                        "name": "sequence",
                        "type": "number",
                        "returnType": "number",
                        "line": 9
                    }
                }
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "AppPage",
            "id": "class-AppPage-b1fb6c4baa5c8654be92c5b3586f4d65",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n    async navigateTo(): Promise<unknown> {\n        return browser.get(browser.baseUrl);\n    }\n\n    async getTitleText(): Promise<string> {\n        return element(by.css('app-root .content span')).getText();\n    }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8,
                    "modifierKind": [
                        120
                    ]
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4,
                    "modifierKind": [
                        120
                    ]
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        }
    ],
    "directives": [
        {
            "name": "BaseInputDirective",
            "id": "directive-BaseInputDirective-86f656242c6c760fe1a996fbf1ae11d2",
            "file": "projects/basic-component-library/src/lib/base-input/base-input.directive.ts",
            "type": "directive",
            "description": "",
            "sourceCode": "import {\n  Directive,\n  Input,\n  Renderer2,\n  ElementRef,\n  HostBinding,\n  ViewContainerRef,\n  ComponentRef,\n} from '@angular/core';\n\nimport { BaseErrorComponent } from '../base-error/base-error.component';\nimport { SequenceGeneratorService } from '../utils/sequence-generator.service';\nimport { BASE_INPUT_STYLE } from './base-input.style';\nimport { COLORS } from '../theme/colors.constant';\n\n@Directive({\n  selector: '[base-input]',\n})\nexport class BaseInputDirective {\n  @HostBinding('style') style = BASE_INPUT_STYLE;\n  @HostBinding('style.background-color') backgroundColor = 'unset';\n  @HostBinding('style.border-color') borderColor = COLORS.darkGrey;\n\n  @Input() set id(id: string) {\n    if (id) {\n      this._id = id;\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'id', id);\n      this.bindInputLabel();\n    }\n  }\n\n  @Input() set label(labelText: string) {\n    if (labelText) {\n      this.createLabelElement(labelText);\n      this.bindInputLabel();\n    }\n  }\n\n  @Input() set errorMessage(error: string) {\n    if (error) {\n      this.borderColor = COLORS.error;\n\n      this.errorComponent = this.viewContainerRef.createComponent(BaseErrorComponent, {});\n      this.errorComponent.instance.message = error;\n    } else {\n      this.borderColor = COLORS.darkGrey;\n\n      if (this.errorComponent) {\n        this.errorComponent.destroy();\n      }\n    }\n  }\n\n  @Input() set disable(isDisabled: boolean) {\n    if (isDisabled) {\n      this.backgroundColor = COLORS.disabled;\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', '');\n    } else {\n      this.backgroundColor = 'unset';\n      this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');\n    }\n  }\n\n  private _id = '';\n  private labelClass = '';\n  private errorComponent: ComponentRef<BaseErrorComponent> | undefined;\n\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    private viewContainerRef: ViewContainerRef,\n    private sequenceGeneratorService: SequenceGeneratorService\n  ) {}\n\n  get sequenceId(): number {\n    return this.sequenceGeneratorService.sequence;\n  }\n\n  get parentNode(): any {\n    return this.renderer.parentNode(this.elementRef.nativeElement);\n  }\n\n  get labelElement(): any {\n    return this.parentNode.querySelector(`label.${this.labelClass}`);\n  }\n\n  createElement(element: string, className: string, children?: any[]): void {\n    const labelElement = this.renderer.createElement(element);\n\n    /**\n     * Adds the class to the element created\n     */\n    this.renderer.setAttribute(labelElement, 'class', className);\n\n    /**\n     * Includes the element on the node\n     */\n    this.renderer.insertBefore(this.parentNode, labelElement, this.elementRef.nativeElement);\n\n    children?.forEach((element) =>\n      this.renderer.appendChild(this.parentNode.querySelector(`label.${className}`), element)\n    );\n  }\n\n  createLabelElement(labelText: string): void {\n    const className = `base-label${this.sequenceId}`;\n    const innerText = this.renderer.createText(labelText);\n\n    this.labelClass = className;\n    this.createElement('label', className, [innerText]);\n\n    this.renderer.setAttribute(this.labelElement, 'style', `color: ${COLORS.darkGrey}`);\n  }\n\n  bindInputLabel(): void {\n    if (this._id && this.labelClass) {\n      this.renderer.setAttribute(this.labelElement, 'for', this._id);\n    }\n  }\n}\n",
            "selector": "[base-input]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "disable",
                    "line": 54,
                    "type": "boolean"
                },
                {
                    "name": "errorMessage",
                    "line": 39,
                    "type": "string"
                },
                {
                    "name": "id",
                    "line": 24,
                    "type": "string"
                },
                {
                    "name": "label",
                    "line": 32,
                    "type": "string"
                }
            ],
            "outputsClass": [],
            "hostBindings": [
                {
                    "name": "style",
                    "defaultValue": "BASE_INPUT_STYLE",
                    "line": 20
                },
                {
                    "name": "style.background-color",
                    "defaultValue": "'unset'",
                    "line": 21
                },
                {
                    "name": "style.border-color",
                    "defaultValue": "COLORS.darkGrey",
                    "line": 22
                }
            ],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "_id",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "errorComponent",
                    "type": "ComponentRef<BaseErrorComponent> | undefined",
                    "optional": false,
                    "description": "",
                    "line": 66,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "labelClass",
                    "defaultValue": "''",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 65,
                    "modifierKind": [
                        112
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "bindInputLabel",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115
                },
                {
                    "name": "createElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "string"
                        },
                        {
                            "name": "className",
                            "type": "string"
                        },
                        {
                            "name": "children",
                            "type": "any[]",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "className",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "children",
                            "type": "any[]",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "createLabelElement",
                    "args": [
                        {
                            "name": "labelText",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "jsdoctags": [
                        {
                            "name": "labelText",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef"
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2"
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef"
                    },
                    {
                        "name": "sequenceGeneratorService",
                        "type": "SequenceGeneratorService"
                    }
                ],
                "line": 66,
                "jsdoctags": [
                    {
                        "name": "elementRef",
                        "type": "ElementRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "renderer",
                        "type": "Renderer2",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "viewContainerRef",
                        "type": "ViewContainerRef",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "sequenceGeneratorService",
                        "type": "SequenceGeneratorService",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "id": {
                    "name": "id",
                    "setSignature": {
                        "name": "id",
                        "type": "void",
                        "args": [
                            {
                                "name": "id",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "id",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "label": {
                    "name": "label",
                    "setSignature": {
                        "name": "label",
                        "type": "void",
                        "args": [
                            {
                                "name": "labelText",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 32,
                        "jsdoctags": [
                            {
                                "name": "labelText",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "errorMessage": {
                    "name": "errorMessage",
                    "setSignature": {
                        "name": "errorMessage",
                        "type": "void",
                        "args": [
                            {
                                "name": "error",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 39,
                        "jsdoctags": [
                            {
                                "name": "error",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "disable": {
                    "name": "disable",
                    "setSignature": {
                        "name": "disable",
                        "type": "void",
                        "args": [
                            {
                                "name": "isDisabled",
                                "type": "boolean"
                            }
                        ],
                        "returnType": "void",
                        "line": 54,
                        "jsdoctags": [
                            {
                                "name": "isDisabled",
                                "type": "boolean",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                },
                "sequenceId": {
                    "name": "sequenceId",
                    "getSignature": {
                        "name": "sequenceId",
                        "type": "number",
                        "returnType": "number",
                        "line": 75
                    }
                },
                "parentNode": {
                    "name": "parentNode",
                    "getSignature": {
                        "name": "parentNode",
                        "type": "any",
                        "returnType": "any",
                        "line": 79
                    }
                },
                "labelElement": {
                    "name": "labelElement",
                    "getSignature": {
                        "name": "labelElement",
                        "type": "any",
                        "returnType": "any",
                        "line": 83
                    }
                }
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-2cea92580bb789027696fb48ae4521c2",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "defaultValue": "'custom error2'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "form",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "options",
                    "defaultValue": "[\n    //tirar\n    {\n      value: 'option1',\n      viewValue: 'Option 1',\n    },\n    {\n      value: 'option2',\n      viewValue: 'Option 2',\n    },\n    {\n      value: 'option3',\n      viewValue: 'Option 3',\n    },\n  ]",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "title",
                    "defaultValue": "'components-library'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "action",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n})\nexport class AppComponent {\n  title = 'components-library';\n  form: any; ///\n  errorMessage = 'custom error2';\n\n  options = [\n    //tirar\n    {\n      value: 'option1',\n      viewValue: 'Option 1',\n    },\n    {\n      value: 'option2',\n      viewValue: 'Option 2',\n    },\n    {\n      value: 'option3',\n      viewValue: 'Option 3',\n    },\n  ];\n\n  constructor(private formBuilder: FormBuilder) {\n    //tirar construtor\n    this.form = formBuilder.group({\n      username: ['', [Validators.required]],\n      password: ['', [Validators.required, Validators.minLength(6)]],\n    });\n\n    // setTimeout(() => {\n    //   this.errorMessage = '';\n    // }, 3000);\n  }\n\n  action() {\n    ///\n    alert('clicked');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<h1>Basic Components Library</h1>\n<a href=\"https://www.npmjs.com/package/basic-component-library\" target=\"_blank\"\n    >Access the NPM Link</a\n>\n\n<label> aaa </label>\n<form [formGroup]=\"form\">\n    <input base-input [label]=\"'teste'\" id=\"oi\" [disable]=\"true\" formControlName=\"username\" [errorMessage]=\"''\" />\n    <div>\n        <input base-input [label]=\"'x'\" [id]=\"'id2'\" formControlName=\"password\" [errorMessage]=\"errorMessage\" />\n    </div>    \n    <input base-input type=\"password\" />\n\n        \n    <!-- <base-error message=\"Teste errir\"></base-error> -->\n<!--     \n    <base-select\n        [options]=\"options\"\n        [label]=\"'Select'\"\n        [id]=\"'select'\"\n        [error]=\"'error'\"\n        [disabled]=\"false\"\n    >\n    </base-select> -->\n\n    <!-- <base-button>Hello</base-button> -->\n\n</form>\n"
        },
        {
            "name": "BaseButtonComponent",
            "id": "component-BaseButtonComponent-835e02c980a04e2f5ab32934d3f904b4",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button       type=\"button\"\n       (click)=\"onClick.emit($event)\"\n       [ngClass]=\"classes\"\n       [ngStyle]=\"{ 'background-color': backgroundColor }\">\n       {{ label }}\n   </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 39
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 19
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 31,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 45,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'storybook-button',\n    template: ` <button\n        type=\"button\"\n        (click)=\"onClick.emit($event)\"\n        [ngClass]=\"classes\"\n        [ngStyle]=\"{ 'background-color': backgroundColor }\">\n        {{ label }}\n    </button>`,\n    styleUrls: ['./button.css'],\n})\nexport default class BaseButtonComponent {\n    /**\n     * Is this the principal call to action on the page?\n     */\n    @Input()\n    primary = false;\n\n    /**\n     * What background color to use\n     */\n    @Input()\n    backgroundColor?: string;\n\n    /**\n     * How large should the button be?\n     */\n    @Input()\n    size: 'small' | 'medium' | 'large' = 'medium';\n\n    /**\n     * Button contents\n     *\n     * @required\n     */\n    @Input()\n    label = 'Button';\n\n    /**\n     * Optional click handler\n     */\n    @Output()\n    onClick = new EventEmitter<Event>();\n\n    public get classes(): string[] {\n        const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n        return ['storybook-button', `storybook-button--${this.size}`, mode];\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n    font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-weight: 700;\n    border: 0;\n    border-radius: 3em;\n    cursor: pointer;\n    display: inline-block;\n    line-height: 1;\n}\n.storybook-button--primary {\n    color: white;\n    background-color: #1ea7fd;\n}\n.storybook-button--secondary {\n    color: #333;\n    background-color: transparent;\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n}\n.storybook-button--small {\n    font-size: 12px;\n    padding: 10px 16px;\n}\n.storybook-button--medium {\n    font-size: 14px;\n    padding: 11px 20px;\n}\n.storybook-button--large {\n    font-size: 16px;\n    padding: 12px 24px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 47
                    }
                }
            }
        },
        {
            "name": "BaseButtonComponent",
            "id": "component-BaseButtonComponent-33ebcd9e1e5cf89e779054068a0228b9-1",
            "file": "projects/basic-component-library/src/lib/base-button/base-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "base-button",
            "styleUrls": [
                "./base-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./base-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "action",
                    "defaultValue": "() => {}",
                    "line": 12
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 11
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "line": 10
                },
                {
                    "name": "type",
                    "defaultValue": "'primary'",
                    "line": 9,
                    "type": "\"primary\" | \"secondary\""
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "handleClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n    selector: 'base-button',\n    templateUrl: './base-button.component.html',\n    styleUrls: ['./base-button.component.scss'],\n})\nexport class BaseButtonComponent {\n    @Input() type: 'primary' | 'secondary' = 'primary';\n    @Input() id = '';\n    @Input() disabled = false;\n    @Input() action = () => {};\n\n    handleClick() {\n        if (!this.disabled) {\n            this.action();\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/variables';\n\nbutton {\n    border: none;\n    border-radius: 7px;\n    padding: 8px;\n    font-weight: bold;\n\n    &:hover {\n        text-decoration: underline;\n    }\n}\n\n.primary {\n    background-color: $navy-blue;\n    color: $white;\n}\n\n.secondary {\n    background-color: $yellow;\n    color: $navy-blue;\n}\n\n.disabled {\n    background-color: $light-gray;\n    color: $dark-gray;\n\n    &:hover {\n        text-decoration: none;\n        cursor: default;\n    }\n}\n",
                    "styleUrl": "./base-button.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "BaseButtonComponent-1",
            "templateData": "<button [class]=\"type\" (click)=\"handleClick()\" [ngClass]=\"{ disabled: disabled }\" id=\"id\">\n    <ng-content></ng-content>\n</button>\n"
        },
        {
            "name": "BaseErrorComponent",
            "id": "component-BaseErrorComponent-e0d27ca2c8acc759f5b1e7ec9405e144",
            "file": "projects/basic-component-library/src/lib/base-error/base-error.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "base-error",
            "styleUrls": [
                "./base-error.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./base-error.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "message",
                    "defaultValue": "''",
                    "line": 9
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n@Component({\n  selector: 'base-error',\n  templateUrl: './base-error.component.html',\n  styleUrls: ['./base-error.component.scss'],\n})\nexport class BaseErrorComponent {\n  @Input() message = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".error {\n    color: red;\n\n    display: flex;\n    align-items: flex-end;\n    margin: 4px;\n\n    &__icon {\n        background: url('../../assets/svg/error.svg') no-repeat;\n        height: 14px;\n        margin-right: 4px;\n        width: 14px;\n        background-size: cover;\n    }\n\n    &__message {\n        font-size: 14px;\n        height: 12px;\n        line-height: 14px;\n    }\n}\n",
                    "styleUrl": "./base-error.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div *ngIf=\"message\" class=\"error d-flex\">\n    <div class=\"error__icon\"></div>\n    <span class=\"error__message\">{{ message }}</span>\n</div>\n"
        },
        {
            "name": "BaseSelectComponent",
            "id": "component-BaseSelectComponent-8cebfdc3af1323664b455f6ebd9ca1c4",
            "file": "projects/basic-component-library/src/lib/base-select/base-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "base-select",
            "styleUrls": [
                "./base-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./base-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "control",
                    "defaultValue": "new UntypedFormControl({ value: null })",
                    "line": 24,
                    "type": "UntypedFormControl"
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "line": 23
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "line": 25
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "line": 22
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "line": 21
                },
                {
                    "name": "options",
                    "defaultValue": "[\n        {\n            value: '',\n            viewValue: '',\n        },\n    ]",
                    "line": 15,
                    "type": "Array<Option>"
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "change",
                            "type": "SimpleChanges"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "change",
                            "type": "SimpleChanges",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, OnChanges, SimpleChanges } from '@angular/core';\nimport { UntypedFormControl } from '@angular/forms';\n\ntype Option = {\n    value: string;\n    viewValue: string;\n};\n\n@Component({\n    selector: 'base-select',\n    templateUrl: './base-select.component.html',\n    styleUrls: ['./base-select.component.scss'],\n})\nexport class BaseSelectComponent implements OnChanges {\n    @Input() options: Array<Option> = [\n        {\n            value: '',\n            viewValue: '',\n        },\n    ];\n    @Input() label = '';\n    @Input() id = '';\n    @Input() disabled = false;\n    @Input() control = new UntypedFormControl({ value: null });\n    @Input() error = '';\n\n    ngOnChanges(change: SimpleChanges) {\n        if (change.disabled?.currentValue) {\n            this.control.disable();\n        } else if (change.disabled?.currentValue === false) {\n            this.control.enable();\n        }\n    }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../assets/variables';\n\n.select {\n    display: flex;\n    flex-direction: column;\n\n    &__field {\n        background-color: $white;\n        border: solid 1px;\n        border-radius: 7px;\n        height: 28px;\n        &:focus {\n            outline: none;\n        }\n    }\n    &__option {\n        &:checked {\n            background-color: $navy-blue;\n            color: $yellow;\n        }\n    }\n}\n.disabled {\n    background-color: $light-gray;\n}\n",
                    "styleUrl": "./base-select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "templateData": "<div class=\"select\">\n    <label [for]=\"id\">{{ label }}</label>\n    <select class=\"select__field\" [ngClass]=\"{ disabled: disabled }\" [formControl]=\"control\">\n        <option></option>\n        <option *ngFor=\"let opt of options\" value=\"opt.value\" class=\"select__option\">\n            {{ opt.viewValue }}\n        </option>\n    </select>\n    <base-error [message]=\"error\"></base-error>\n</div>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-b5b874d3144728d6548c70617979cec1",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>        <div class=\"wrapper\">\n            <div>\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n                            fill=\"#FFF\" />\n                        <path\n                            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n                            fill=\"#555AB9\" />\n                        <path\n                            d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n                            fill=\"#91BAF8\" />\n                    </g>\n                </svg>\n                <h1>Acme</h1>\n            </div>\n            <div>\n                <storybook-button\n                    *ngIf=\"user\"\n                    size=\"small\"\n                    (onClick)=\"onLogout.emit($event)\"\n                    label=\"Log out\"></storybook-button>\n                <storybook-button\n                    *ngIf=\"!user\"\n                    size=\"small\"\n                    (onClick)=\"onLogin.emit($event)\"\n                    label=\"Log in\"></storybook-button>\n                <storybook-button\n                    *ngIf=\"!user\"\n                    primary\n                    size=\"small\"\n                    (onClick)=\"onCreateAccount.emit($event)\"\n                    label=\"Sign up\"></storybook-button>\n            </div>\n        </div>\n    </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 47,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 50,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 53,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'storybook-header',\n    template: `<header>\n        <div class=\"wrapper\">\n            <div>\n                <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n                            fill=\"#FFF\" />\n                        <path\n                            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n                            fill=\"#555AB9\" />\n                        <path\n                            d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n                            fill=\"#91BAF8\" />\n                    </g>\n                </svg>\n                <h1>Acme</h1>\n            </div>\n            <div>\n                <storybook-button\n                    *ngIf=\"user\"\n                    size=\"small\"\n                    (onClick)=\"onLogout.emit($event)\"\n                    label=\"Log out\"></storybook-button>\n                <storybook-button\n                    *ngIf=\"!user\"\n                    size=\"small\"\n                    (onClick)=\"onLogin.emit($event)\"\n                    label=\"Log in\"></storybook-button>\n                <storybook-button\n                    *ngIf=\"!user\"\n                    primary\n                    size=\"small\"\n                    (onClick)=\"onCreateAccount.emit($event)\"\n                    label=\"Sign up\"></storybook-button>\n            </div>\n        </div>\n    </header>`,\n    styleUrls: ['./header.css'],\n})\nexport default class HeaderComponent {\n    @Input()\n    user: unknown = null;\n\n    @Output()\n    onLogin = new EventEmitter<Event>();\n\n    @Output()\n    onLogout = new EventEmitter<Event>();\n\n    @Output()\n    onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\n    font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n    padding: 15px 20px;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n}\n\nsvg {\n    display: inline-block;\n    vertical-align: top;\n}\n\nh1 {\n    font-weight: 900;\n    font-size: 20px;\n    line-height: 1;\n    margin: 6px 0 6px 10px;\n    display: inline-block;\n    vertical-align: top;\n}\n\nbutton + button {\n    margin-left: 10px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-35c1075912def44ad0b1a0e820d9a68b",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>        <storybook-header\n            [user]=\"user\"\n            (onLogout)=\"onLogout.emit($event)\"\n            (onLogin)=\"onLogin.emit($event)\"\n            (onCreateAccount)=\"onCreateAccount.emit($event)\"></storybook-header>\n        <section>\n            <h2>Pages in Storybook</h2>\n            <p>\n                We recommend building UIs with a\n                <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <strong>component-driven</strong>\n                </a>\n                process starting with atomic components and ending with pages.\n            </p>\n            <p>\n                Render pages with mock data. This makes it easy to build and review page states\n                without needing to navigate to them in your app. Here are some handy patterns for\n                managing page data in Storybook:\n            </p>\n            <ul>\n                <li>\n                    Use a higher-level connected component. Storybook helps you compose such data\n                    from the \"args\" of child component stories\n                </li>\n                <li>\n                    Assemble data in the page component from your services. You can mock these\n                    services out using Storybook.\n                </li>\n            </ul>\n            <p>\n                Get a guided tutorial on component-driven development at\n                <a\n                    href=\"https://storybook.js.org/tutorials/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\">\n                    Storybook tutorials\n                </a>\n                . Read more in the\n                <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    docs\n                </a>\n                .\n            </p>\n            <div class=\"tip-wrapper\">\n                <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n                <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n                            id=\"a\"\n                            fill=\"#999\" />\n                    </g>\n                </svg>\n                Viewports addon in the toolbar\n            </div>\n        </section>\n    </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 67,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 76,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 70,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 73,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n    selector: 'storybook-page',\n    template: `<article>\n        <storybook-header\n            [user]=\"user\"\n            (onLogout)=\"onLogout.emit($event)\"\n            (onLogin)=\"onLogin.emit($event)\"\n            (onCreateAccount)=\"onCreateAccount.emit($event)\"></storybook-header>\n        <section>\n            <h2>Pages in Storybook</h2>\n            <p>\n                We recommend building UIs with a\n                <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    <strong>component-driven</strong>\n                </a>\n                process starting with atomic components and ending with pages.\n            </p>\n            <p>\n                Render pages with mock data. This makes it easy to build and review page states\n                without needing to navigate to them in your app. Here are some handy patterns for\n                managing page data in Storybook:\n            </p>\n            <ul>\n                <li>\n                    Use a higher-level connected component. Storybook helps you compose such data\n                    from the \"args\" of child component stories\n                </li>\n                <li>\n                    Assemble data in the page component from your services. You can mock these\n                    services out using Storybook.\n                </li>\n            </ul>\n            <p>\n                Get a guided tutorial on component-driven development at\n                <a\n                    href=\"https://storybook.js.org/tutorials/\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\">\n                    Storybook tutorials\n                </a>\n                . Read more in the\n                <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n                    docs\n                </a>\n                .\n            </p>\n            <div class=\"tip-wrapper\">\n                <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n                <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <g fill=\"none\" fillRule=\"evenodd\">\n                        <path\n                            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n                            id=\"a\"\n                            fill=\"#999\" />\n                    </g>\n                </svg>\n                Viewports addon in the toolbar\n            </div>\n        </section>\n    </article>`,\n    styleUrls: ['./page.css'],\n})\nexport default class PageComponent {\n    @Input()\n    user: unknown = null;\n\n    @Output()\n    onLogin = new EventEmitter<Event>();\n\n    @Output()\n    onLogout = new EventEmitter<Event>();\n\n    @Output()\n    onCreateAccount = new EventEmitter<Event>();\n}\n\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\n//   <article>\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\n\n// );\n// Page.propTypes = {\n//   user: PropTypes.shape({}),\n//   onLogin: PropTypes.func.isRequired,\n//   onLogout: PropTypes.func.isRequired,\n//   onCreateAccount: PropTypes.func.isRequired,\n// };\n\n// Page.defaultProps = {\n//   user: null,\n// };\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\n    font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    font-size: 14px;\n    line-height: 24px;\n    padding: 48px 20px;\n    margin: 0 auto;\n    max-width: 600px;\n    color: #333;\n}\n\nh2 {\n    font-weight: 900;\n    font-size: 32px;\n    line-height: 1;\n    margin: 0 0 4px;\n    display: inline-block;\n    vertical-align: top;\n}\n\np {\n    margin: 1em 0;\n}\n\na {\n    text-decoration: none;\n    color: #1ea7fd;\n}\n\nul {\n    padding-left: 30px;\n    margin: 1em 0;\n}\n\nli {\n    margin-bottom: 8px;\n}\n\n.tip {\n    display: inline-block;\n    border-radius: 1em;\n    font-size: 11px;\n    line-height: 12px;\n    font-weight: 700;\n    background: #e7fdd8;\n    color: #66bf3c;\n    padding: 4px 12px;\n    margin-right: 10px;\n    vertical-align: top;\n}\n\n.tip-wrapper {\n    font-size: 13px;\n    line-height: 20px;\n    margin-top: 40px;\n    margin-bottom: 40px;\n}\n\n.tip-wrapper svg {\n    display: inline-block;\n    height: 12px;\n    width: 12px;\n    margin-right: 4px;\n    vertical-align: top;\n    margin-top: 3px;\n}\n\n.tip-wrapper svg path {\n    fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BaseButtonModule"
                        },
                        {
                            "name": "BaseErrorModule"
                        },
                        {
                            "name": "BaseInputModule"
                        },
                        {
                            "name": "BaseSelectModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BaseButtonModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BaseButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BaseErrorModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BaseErrorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BaseErrorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BaseInputModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BaseInputDirective"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BaseErrorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BaseInputDirective"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "BaseSelectModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "BaseSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "BaseErrorModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "BaseSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "action",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/button.stories.ts",
                "type": "",
                "defaultValue": "() => alert('clicked')"
            },
            {
                "name": "BASE_INPUT_STYLE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/lib/base-input/base-input.style.ts",
                "type": "",
                "defaultValue": "`\n  display: flex;\n  min-height: 1.2rem;\n  padding: 0.2rem 0.3rem;\n  border: solid 1px;\n  border-radius: 0.4rem;\n  outline: none;\n`"
            },
            {
                "name": "COLORS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/lib/theme/colors.constant.ts",
                "type": "object",
                "defaultValue": "{\n  darkGrey: '#373B40',\n  disabled: '#D9D9D9',\n  error: '#FF0000',\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/test.ts",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Enabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/input.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Enabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\n    production: true,\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\n    production: false,\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/select.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/select.stories.ts",
                "type": "[]",
                "defaultValue": "[\n  {\n    value: 'option1',\n    viewValue: 'Option 1',\n  },\n  {\n    value: 'option2',\n    viewValue: 'Option 2',\n  },\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "type": "literal type"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/test.ts",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\n    props: args,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/button.stories.ts",
                "type": "Story<BaseButtonComponent>",
                "defaultValue": "(args: BaseButtonComponent) => ({\n    props: args,\n    template: `\n        <base-button [type]=\"type\" [id]=\"id\" [action]=\"action\">Ok</base-button>\n    `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/input.stories.ts",
                "type": "Story<BaseInputDirective>",
                "defaultValue": "(args: BaseInputDirective) => ({\n  props: args,\n  template: `<input base-input />`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/basic-component-library/src/stories/select.stories.ts",
                "type": "Story<BaseSelectComponent>",
                "defaultValue": "(args: BaseSelectComponent) => ({\n  props: args,\n})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Option",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type",
                "file": "projects/basic-component-library/src/lib/base-select/base-select.component.ts",
                "description": "",
                "kind": 165
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "projects/basic-component-library/src/stories/button.stories.ts": [
                {
                    "name": "action",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/button.stories.ts",
                    "type": "",
                    "defaultValue": "() => alert('clicked')"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/button.stories.ts",
                    "type": "Story<BaseButtonComponent>",
                    "defaultValue": "(args: BaseButtonComponent) => ({\n    props: args,\n    template: `\n        <base-button [type]=\"type\" [id]=\"id\" [action]=\"action\">Ok</base-button>\n    `,\n})"
                }
            ],
            "projects/basic-component-library/src/lib/base-input/base-input.style.ts": [
                {
                    "name": "BASE_INPUT_STYLE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/lib/base-input/base-input.style.ts",
                    "type": "",
                    "defaultValue": "`\n  display: flex;\n  min-height: 1.2rem;\n  padding: 0.2rem 0.3rem;\n  border: solid 1px;\n  border-radius: 0.4rem;\n  outline: none;\n`"
                }
            ],
            "projects/basic-component-library/src/lib/theme/colors.constant.ts": [
                {
                    "name": "COLORS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/lib/theme/colors.constant.ts",
                    "type": "object",
                    "defaultValue": "{\n  darkGrey: '#373B40',\n  disabled: '#D9D9D9',\n  error: '#FF0000',\n}"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/basic-component-library/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/test.ts",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/test.ts",
                    "type": "literal type"
                }
            ],
            "projects/basic-component-library/src/stories/select.stories.ts": [
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Enabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/select.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/select.stories.ts",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    value: 'option1',\n    viewValue: 'Option 1',\n  },\n  {\n    value: 'option2',\n    viewValue: 'Option 2',\n  },\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/select.stories.ts",
                    "type": "Story<BaseSelectComponent>",
                    "defaultValue": "(args: BaseSelectComponent) => ({\n  props: args,\n})"
                }
            ],
            "projects/basic-component-library/src/stories/input.stories.ts": [
                {
                    "name": "Enabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/input.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/basic-component-library/src/stories/input.stories.ts",
                    "type": "Story<BaseInputDirective>",
                    "defaultValue": "(args: BaseInputDirective) => ({\n  props: args,\n  template: `<input base-input />`,\n})"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\n    production: true,\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\n    production: false,\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\n    props: args,\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\n    props: args,\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\n    props: args,\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/basic-component-library/src/lib/base-select/base-select.component.ts": [
                {
                    "name": "Option",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type",
                    "file": "projects/basic-component-library/src/lib/base-select/base-select.component.ts",
                    "description": "",
                    "kind": 165
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 2,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/lib/base-button/base-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/lib/base-error/base-error.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseErrorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/lib/base-input/base-input.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "BaseInputDirective",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/lib/base-input/base-input.style.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BASE_INPUT_STYLE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/lib/base-select/base-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/lib/theme/colors.constant.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "COLORS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/lib/utils/sequence-generator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SequenceGeneratorService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "action",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Enabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Enabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/stories/select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/basic-component-library/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "BaseButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}